/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReputationSystem {
  export type EdgeStruct = { node1: AddressLike; node2: AddressLike };

  export type EdgeStructOutput = [node1: string, node2: string] & {
    node1: string;
    node2: string;
  };

  export type ScoreStruct = { from: AddressLike; score: BigNumberish };

  export type ScoreStructOutput = [from: string, score: bigint] & {
    from: string;
    score: bigint;
  };
}

export interface ReputationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bonds"
      | "deposit"
      | "edges"
      | "getEdges"
      | "getGivenScores"
      | "getNodeAddresses"
      | "getNodeAddressesLength"
      | "getNodeData"
      | "getRandomNodes"
      | "giveScore"
      | "nodeAddresses"
      | "nodes"
      | "randomNodes"
      | "verifyImportance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BondDeposited"
      | "EdgeAdded"
      | "ImportanceUpdated"
      | "ImportanceVerified"
      | "ReputationUpdated"
      | "ScoreGiven"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bonds", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "edges", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getEdges", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGivenScores",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeAddressesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "randomNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyImportance",
    values: [AddressLike[], BigNumberish[][]]
  ): string;

  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "edges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEdges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGivenScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeAddressesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giveScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyImportance",
    data: BytesLike
  ): Result;
}

export namespace BondDepositedEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EdgeAddedEvent {
  export type InputTuple = [node1: AddressLike, node2: AddressLike];
  export type OutputTuple = [node1: string, node2: string];
  export interface OutputObject {
    node1: string;
    node2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImportanceUpdatedEvent {
  export type InputTuple = [nodeAddress: AddressLike, importance: BigNumberish];
  export type OutputTuple = [nodeAddress: string, importance: bigint];
  export interface OutputObject {
    nodeAddress: string;
    importance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImportanceVerifiedEvent {
  export type InputTuple = [success: boolean];
  export type OutputTuple = [success: boolean];
  export interface OutputObject {
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [nodeAddress: AddressLike, reputation: BigNumberish];
  export type OutputTuple = [nodeAddress: string, reputation: bigint];
  export interface OutputObject {
    nodeAddress: string;
    reputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreGivenEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    score: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, score: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationSystem;
  waitForDeployment(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bonds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  edges: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { node1: string; node2: string }],
    "view"
  >;

  getEdges: TypedContractMethod<
    [],
    [ReputationSystem.EdgeStructOutput[]],
    "view"
  >;

  getGivenScores: TypedContractMethod<
    [nodeAddress: AddressLike],
    [ReputationSystem.ScoreStructOutput[]],
    "view"
  >;

  getNodeAddresses: TypedContractMethod<[], [string[]], "view">;

  getNodeAddressesLength: TypedContractMethod<[], [bigint], "view">;

  getNodeData: TypedContractMethod<
    [nodeAddress: AddressLike],
    [[bigint, bigint] & { reputation: bigint; totalGivenScores: bigint }],
    "view"
  >;

  getRandomNodes: TypedContractMethod<
    [],
    [[string, string, string]],
    "nonpayable"
  >;

  giveScore: TypedContractMethod<
    [to: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  nodeAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  nodes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        id: string;
        reputation: bigint;
        importance: bigint;
      }
    ],
    "view"
  >;

  randomNodes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifyImportance: TypedContractMethod<
    [sortedNodeAddresses: AddressLike[], importances: BigNumberish[][]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bonds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "edges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { node1: string; node2: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEdges"
  ): TypedContractMethod<[], [ReputationSystem.EdgeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getGivenScores"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [ReputationSystem.ScoreStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodeAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNodeAddressesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNodeData"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [[bigint, bigint] & { reputation: bigint; totalGivenScores: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomNodes"
  ): TypedContractMethod<[], [[string, string, string]], "nonpayable">;
  getFunction(
    nameOrSignature: "giveScore"
  ): TypedContractMethod<
    [to: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nodeAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nodes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        id: string;
        reputation: bigint;
        importance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "randomNodes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyImportance"
  ): TypedContractMethod<
    [sortedNodeAddresses: AddressLike[], importances: BigNumberish[][]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BondDeposited"
  ): TypedContractEvent<
    BondDepositedEvent.InputTuple,
    BondDepositedEvent.OutputTuple,
    BondDepositedEvent.OutputObject
  >;
  getEvent(
    key: "EdgeAdded"
  ): TypedContractEvent<
    EdgeAddedEvent.InputTuple,
    EdgeAddedEvent.OutputTuple,
    EdgeAddedEvent.OutputObject
  >;
  getEvent(
    key: "ImportanceUpdated"
  ): TypedContractEvent<
    ImportanceUpdatedEvent.InputTuple,
    ImportanceUpdatedEvent.OutputTuple,
    ImportanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ImportanceVerified"
  ): TypedContractEvent<
    ImportanceVerifiedEvent.InputTuple,
    ImportanceVerifiedEvent.OutputTuple,
    ImportanceVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreGiven"
  ): TypedContractEvent<
    ScoreGivenEvent.InputTuple,
    ScoreGivenEvent.OutputTuple,
    ScoreGivenEvent.OutputObject
  >;

  filters: {
    "BondDeposited(address,uint256)": TypedContractEvent<
      BondDepositedEvent.InputTuple,
      BondDepositedEvent.OutputTuple,
      BondDepositedEvent.OutputObject
    >;
    BondDeposited: TypedContractEvent<
      BondDepositedEvent.InputTuple,
      BondDepositedEvent.OutputTuple,
      BondDepositedEvent.OutputObject
    >;

    "EdgeAdded(address,address)": TypedContractEvent<
      EdgeAddedEvent.InputTuple,
      EdgeAddedEvent.OutputTuple,
      EdgeAddedEvent.OutputObject
    >;
    EdgeAdded: TypedContractEvent<
      EdgeAddedEvent.InputTuple,
      EdgeAddedEvent.OutputTuple,
      EdgeAddedEvent.OutputObject
    >;

    "ImportanceUpdated(address,uint256)": TypedContractEvent<
      ImportanceUpdatedEvent.InputTuple,
      ImportanceUpdatedEvent.OutputTuple,
      ImportanceUpdatedEvent.OutputObject
    >;
    ImportanceUpdated: TypedContractEvent<
      ImportanceUpdatedEvent.InputTuple,
      ImportanceUpdatedEvent.OutputTuple,
      ImportanceUpdatedEvent.OutputObject
    >;

    "ImportanceVerified(bool)": TypedContractEvent<
      ImportanceVerifiedEvent.InputTuple,
      ImportanceVerifiedEvent.OutputTuple,
      ImportanceVerifiedEvent.OutputObject
    >;
    ImportanceVerified: TypedContractEvent<
      ImportanceVerifiedEvent.InputTuple,
      ImportanceVerifiedEvent.OutputTuple,
      ImportanceVerifiedEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "ScoreGiven(address,address,uint256)": TypedContractEvent<
      ScoreGivenEvent.InputTuple,
      ScoreGivenEvent.OutputTuple,
      ScoreGivenEvent.OutputObject
    >;
    ScoreGiven: TypedContractEvent<
      ScoreGivenEvent.InputTuple,
      ScoreGivenEvent.OutputTuple,
      ScoreGivenEvent.OutputObject
    >;
  };
}
